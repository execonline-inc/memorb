- test child memoization integration support where the child class can override parent method to have it memoized
- modules should be able to define methods that can be included into a class that implements memorb
- duplicate integration inclusions should be allowed if they add instances to be cached
- implementers should be able to pass options to the inclusion
- remove "@memorb_cache=#<Memorb::Cache:...>" from integration intance inspections
- consider parsing the source code to allow for even more succinct method registrations like:
    memorb!
    def memoize_me
      # ...
    end
- consider not defining override methods automaticall upon registration, but instead utilize method_added, method_removed, and method_undefined hooks
- use Module::autoload instead of require_relative to have the library loaded
- change the example implementation to be less contrived (like use scrypt in a password wrapper class, or levels of round-based hashing)
- support method registration by specific instance in addition to by class which affects all instances
- add a version file
- add cache expiration time
